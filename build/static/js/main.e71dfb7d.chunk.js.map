{"version":3,"sources":["hooks/useFullScreen.js","components/templates/ModalLayout/ModalLayout.js","Provider/sharedStore.js","components/CropImage/CropImage.js","components/UploadImage/UploadImage.js","components/OpenWebcam/OpenWebcam.js","components/OpenModal/OpenModal.js","Icons/NoProfilePicture.component.js","components/ImagePreview/ImagePreview.js","App.js","reportWebVitals.js","index.js"],"names":["disableBodyOverflow","document","body","classList","toggle","ModalLayoutComponent","props","isHookDisabled","children","onClose","useEffect","closeOnEscapeKeyDown","useCallback","e","key","addEventListener","removeEventListener","ReactDOM","createPortal","onClick","className","stopPropagation","getElementById","StoreContext","React","createContext","StoreProvider","useState","imagePreview","setImagePreview","base64Preview","setBase64Preview","store","imageToCrop","Provider","value","CropImage","useContext","setImageToCrop","imgRef","useRef","previewCanvasRef","unit","width","height","x","y","crop","setCrop","completedCrop","setCompletedCrop","current","image","canvas","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","onLoad","img","src","onImageLoaded","onChange","c","onComplete","style","ruleOfThirds","ref","display","Math","round","type","disabled","toBlob","blob","previewUrl","URL","createObjectURL","generateImageAndPreview","UploadImage","label","titleLabel","htmlFor","id","name","required","accept","event","target","files","file","imageUrl","OpenWebcam","videoRef","photoRef","isMobile","getWebcamVideoAccess","navigator","mediaDevices","getUserMedia","video","audio","then","stream","srcObject","play","catch","error","console","log","stopWebcam","getTracks","forEach","track","stop","onPlay","photo","context","setInterval","getSnapshot","data","toDataURL","takePhoto","OpenModalComponent","ModalComponent","modal","rest","isModalOpened","setModalOpened","NoProfilePictureIconComponent","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeMiterlimit","strokeLinecap","strokeLinejoin","ImagePreview","alt","App","base64Result","setBase64Result","toBase64","reader","FileReader","readAsDataURL","onloadend","result","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.e71dfb7d.chunk.js","sourcesContent":["import { useEffect } from 'react'\n\nfunction disableBodyOverflow() {\n  document.body.classList.toggle('noscroll')\n}\n\nexport default function useFullScreen(isHookDisabled) {\n  useEffect(() => {\n    if (!isHookDisabled) {\n      disableBodyOverflow()\n      return () => disableBodyOverflow()\n    }\n    return undefined\n  }, [isHookDisabled])\n}\n","/* eslint react/destructuring-assignment: 0 */\nimport React, {\n  useCallback,\n  useEffect,\n} from 'react'\nimport ReactDOM from 'react-dom'\nimport './ModalLayout.css';\nimport useFullScreen from '../../../hooks/useFullScreen'\n\n\nexport function ModalLayoutComponent(props) {\n  const {\n    children,\n    onClose,\n  } = props\n\n  useFullScreen()\n\n\n  const closeOnEscapeKeyDown = useCallback((e) => {\n    if (e.key === 'Escape') {\n      onClose()\n    }\n  }, [onClose])\n\n  useEffect(() => {\n    document.addEventListener('keydown', closeOnEscapeKeyDown)\n    return () => {\n      document.removeEventListener('keydown', closeOnEscapeKeyDown)\n    }\n  }, [closeOnEscapeKeyDown])\n\n  return ReactDOM.createPortal(\n    <div onClick={onClose} className=\"modal\">\n      <article onClick={(e) => e.stopPropagation()}>\n        <header>\n          <button onClick={onClose}>\n            close\n          </button>\n        </header>\n        <section>\n            {children}\n        </section>\n      </article>\n    </div>,\n    document.getElementById('root')\n  )\n}\n","import React, { useState } from \"react\"\n\nexport const StoreContext = React.createContext(null)\n\nexport const StoreProvider =  ({ children }) => {\n  const [imagePreview, setImagePreview] = useState('')\n  const [base64Preview, setBase64Preview] = useState('')\n  const [imageToCrop, setImageToCrop] = useState('')\n  const store = {\n    imagePreview: [imagePreview, setImagePreview],\n    imageToCrop: [imageToCrop, setImageToCrop],\n    base64Preview: [base64Preview, setBase64Preview],\n  }\n  return (\n    <StoreContext.Provider value={store}>\n      {children}\n    </StoreContext.Provider>\n  )\n}\n","/* eslint-disable */\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { StoreContext } from \"../../Provider/sharedStore\";\n\nexport function CropImage(props) {\n  const {\n    onClose,\n  } = props\n\n  const {\n    imagePreview: [imagePreview, setImagePreview],\n    imageToCrop: [imageToCrop, setImageToCrop],\n    base64Preview: [base64Preview, setBase64Preview],\n    } = React.useContext(StoreContext)\n\n  const imgRef = useRef(null)\n  const previewCanvasRef = useRef(null)\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 50,\n    height: 50,\n    x: 25,\n    y: 25\n  })\n  const [completedCrop, setCompletedCrop] = useState(null)\n\n  useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return\n    }\n\n    const image = imgRef.current\n    const canvas = previewCanvasRef.current\n    const crop = completedCrop\n\n    const scaleX = image.naturalWidth / image.width\n    const scaleY = image.naturalHeight / image.height\n    const ctx = canvas.getContext('2d')\n    const pixelRatio = window.devicePixelRatio\n    canvas.width = crop.width * pixelRatio\n    canvas.height = crop.height * pixelRatio\n\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0)\n    ctx.imageSmoothingQuality = 'high'\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height,\n    )\n\n  }, [completedCrop])\n\n  const onLoad = useCallback((img) => {\n    imgRef.current = img\n\n  }, [])\n\n  const onCropChange = (c) => {\n    setCrop(c)\n  }\n\n  const onCropComplete = (c) => {\n    setCompletedCrop(c)\n  }\n\n  const generateImageAndPreview = (canvas, crop) => {\n    if (!crop || !canvas) {\n      return\n    }\n    \n    canvas.toBlob(\n      (blob) => {\n        const previewUrl = URL.createObjectURL(blob)\n        setImagePreview(previewUrl)\n        setBase64Preview(blob)\n        // window.URL.revokeObjectURL(previewUrl);\n      },\n      \"image/png\",\n      1\n    );\n    setImageToCrop('')\n    onClose()\n  }\n\n\n  return (\n    <div className=\"CropImage\">\n      { !imageToCrop && !crop\n      ? null\n      : (\n        <ReactCrop\n          src={imageToCrop}\n          onImageLoaded={onLoad}\n          crop={crop}\n          onChange={onCropChange}\n          onComplete={onCropComplete}\n          style={{ width: '300px', height:'auto'}}\n          ruleOfThirds={true}\n        />\n      ) }\n      <div>\n        <canvas\n          ref={previewCanvasRef}\n          // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n            style={{\n                display: 'none',\n                width: Math.round(completedCrop?.width ?? 0),\n                height: Math.round(completedCrop?.height ?? 0),\n          }}\n        />\n        <button\n          type=\"button\"\n          disabled={!completedCrop?.width || !completedCrop?.height}\n          onClick={() =>\n            generateImageAndPreview(previewCanvasRef.current, completedCrop)\n          }\n        >\n          Select this image\n        </button>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport { ModalLayoutComponent } from '../templates/ModalLayout/ModalLayout'\nimport { CropImage } from '../CropImage/CropImage';\nimport { StoreContext } from \"../../Provider/sharedStore\";\nimport './UploadImage.css';\n\nexport function UploadImage(props) {\n  const { imageToCrop: [imageToCrop, setImageToCrop] } = React.useContext(StoreContext)\n\n  const { onClose, label } = props\n\n  const onImageUpload = (event) => {\n    if (event.target.files !== null) {\n      const file = event.target.files[0]\n      const imageUrl = URL.createObjectURL(file)\n      setImageToCrop(imageUrl)\n    }\n  }\n  \n  return (\n    <ModalLayoutComponent\n      titleLabel={label}\n      onClose={onClose}\n    >\n\n      {imageToCrop\n          ? <CropImage\n            onClose={onClose}\n          />\n          : (<>\n          <label htmlFor=\"picture\">Take a photo</label>\n          <input\n            type=\"file\"\n            id=\"picture\"\n            name=\"picture\"\n            required\n            accept=\"image/*\"\n            onChange={onImageUpload}\n          />\n        </>) }\n    </ModalLayoutComponent>\n  )\n}","import React, { useRef, useEffect } from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { ModalLayoutComponent } from '../templates/ModalLayout/ModalLayout'\nimport { StoreContext } from \"../../Provider/sharedStore\"\nimport { CropImage } from \"../CropImage/CropImage\"\n\nexport function OpenWebcam(props) {\n  const { onClose } = props\n  const {\n    imageToCrop: [imageToCrop, setImageToCrop],\n  } = React.useContext(StoreContext)\n\n  const videoRef = useRef(null)\n  const photoRef = useRef(null)\n\n  useEffect(() => {\n    if (!isMobile) getWebcamVideoAccess()\n  }, [videoRef])\n\n  const getWebcamVideoAccess = () => {\n    if (!navigator.mediaDevices) return\n    // the navigator interface represents the state and the identity of the user agent.\n    // It allows scripts to query it and to register themselves to carry on some activities\n    // MediaDevices allows you to access to connected media input devices like cameras and microphones\n    // getUserMedia prompts the user for permission and returns a MediaStream\n    // the MediaStream is a stream of media content. A stream consists of several tracks such as video tracks\n    navigator.mediaDevices.getUserMedia({ video: { width: 300 }, audio: false })\n      .then((stream) => {\n        const video = videoRef.current\n        if (!video) return\n        video.srcObject = stream\n        video.play()\n      })\n      .catch((error) => {\n        console.log('error', error)\n      })\n  }\n\n  const getSnapshot = () => {\n    const video = videoRef.current\n    const photo = photoRef.current\n\n    // getContext returns a drawing context in the canvas\n    // 2d is the context type: leading to the creation of a\n    // CanvasRenderingContext2D object representing a two-dimensional rendering context\n    // the CanvasRenderingContext2D interface provides the 2D rendering context for the drawing surface of a <canvas>\n    const context = photo.getContext('2d')\n\n    const width = 320\n    const height = 240\n\n    photo.width = width\n    photo.height = height\n\n    // drawImage will write to the canvas every 200ms\n    // drawImage(image, dx, dy, dWidth, dHeight)\n    // dx: x-axis coordinate in the canvas top left corner of the source\n    // dy: y-axis coordinate in the canvas top left corner of the source\n    return setInterval(() => {\n      context.drawImage(video, 0, 0, width, height)\n    }, 200)\n  }\n\n  const takePhoto = () => {\n    const photo = photoRef.current\n    const data = photo.toDataURL('image/jpeg')\n    setImageToCrop(data)\n    stopWebcam()\n  }\n\n  const stopWebcam = () => {\n    const video = videoRef.current\n    const stream = video.srcObject;\n    const tracks = stream.getTracks();\n\n    tracks.forEach(function(track) {\n      track.stop();\n    });\n\n    video.srcObject = null;\n  }\n\n  return (\n    <ModalLayoutComponent\n      onClose={onClose}\n    >\n      {imageToCrop\n        ? <CropImage\n          onClose={onClose}\n        />\n          : <div className=\"OpenWebcam\">\n              <video onPlay={() => getSnapshot()} ref={videoRef} />\n              <button type=\"button\" onClick={() => takePhoto()}>Take a photo</button>\n              <canvas ref={photoRef} style={{ display: 'none' }} />\n            </div> }\n\n    </ModalLayoutComponent>\n  )\n}","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState } from 'react'\nimport './OpenModal.css'\n\nexport function OpenModalComponent(props) {\n  const {\n    modal: ModalComponent,\n    label,\n    ...rest\n  } = props\n\n  const [isModalOpened, setModalOpened] = useState(false)\n\n  return (\n    <span className=\"openModal\">\n      <button onClick={() => setModalOpened(true)} >\n        {label}\n      </button>\n      {isModalOpened && <ModalComponent onClose={() => setModalOpened(false)} {...rest}/>}\n    </span>\n  )\n}\n","import React from 'react'\n\nexport const NoProfilePictureIconComponent = () => (\n  <svg width=\"90\" height=\"100\" viewBox=\"0 0 90 100\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M0 4C0 1.79086 1.79086 0 4 0H86C88.2091 0 90 1.79086 90 4V96C90 98.2091 88.2091 100 86 100H4C1.79086 100 0 98.2091 0 96V4Z\"\n      fill=\"#F4F4F4\"\n    />\n    <path\n      d=\"M61 68C59.4348 60.0541 52.8261 54 45 54C37.1739 54 30.7391 60.0541 29 68\"\n      stroke=\"#999999\"\n      strokeWidth=\"2\"\n      strokeMiterlimit=\"10\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M45 48C49.4183 48 53 44.4183 53 40C53 35.5817 49.4183 32 45 32C40.5817 32 37 35.5817 37 40C37 44.4183 40.5817 48 45 48Z\"\n      stroke=\"#999999\"\n      strokeWidth=\"2\"\n      strokeMiterlimit=\"10\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n","import React from 'react';\nimport { NoProfilePictureIconComponent } from \"../../Icons/NoProfilePicture.component\";\n\nexport function ImagePreview(props) {\n  const { imagePreview } = props\n\n  return (\n    <>\n      <p>Image preview</p>\n      { imagePreview\n        ? <img src={imagePreview} alt=\"alt\" width=\"90\" height=\"auto\" />\n        : <NoProfilePictureIconComponent /> }\n    </>\n  )\n}","/* eslint-disable */\nimport React, { useCallback, useEffect, useState } from \"react\"\nimport { UploadImage } from './components/UploadImage/UploadImage'\nimport { OpenWebcam } from './components/OpenWebcam/OpenWebcam'\nimport { OpenModalComponent} from \"./components/OpenModal/OpenModal\"\nimport './App.css'\nimport { isMobile } from 'react-device-detect'\nimport { ImagePreview } from './components/ImagePreview/ImagePreview'\nimport { StoreContext } from './Provider/sharedStore'\n\n\nexport default function App() {\n  const {\n    imagePreview: [imagePreview, setImagePreview],\n    base64Preview: [base64Preview, setBase64Preview],\n  } = React.useContext(StoreContext)\n\n  const [base64Result, setBase64Result] = useState('')\n\n  const toBase64 = useCallback((base64Preview) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(base64Preview);\n    reader.onloadend = function() {\n      setBase64Result(reader.result.slice(0, 50))\n      return reader.result\n    }\n  })\n\n  useEffect(() => {\n    if (base64Preview) {\n      toBase64(base64Preview)\n    }\n  }, [toBase64, base64Preview])\n\n\n  return (\n    <>\n      <header>\n        <h1>Testing Image Upload</h1>\n      </header>\n      <main>\n        <div className=\"imagePreview\">\n          <ImagePreview imagePreview={imagePreview}/>\n          <p>Image URL: {imagePreview ? imagePreview : 'none'}</p>\n          <p>Base64: { base64Result ? base64Result + ' [...]' : 'none'}</p>\n        </div>\n        <div className=\"userSelection\">\n          <OpenModalComponent modal={UploadImage} label=\"Image Upload\"/>\n          { !isMobile && <OpenModalComponent modal={OpenWebcam} label=\"Image Webcam\"/> }\n        </div>\n      </main>\n    </>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { StoreProvider } from './Provider/sharedStore';\n\nReactDOM.render(\n  <React.StrictMode>\n      <StoreProvider>\n        <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}